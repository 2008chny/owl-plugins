#!/bin/env python
#-*- coding:utf-8 -*-

import os,sys
import os.path
from os.path import isfile
from traceback import format_exc
import xmlrpclib
import socket
import time
import json
import copy

class Resource():
    def __init__(self, pid):
        self.pid = pid

    def get_cpu_user(self):
        cmd="cat /proc/" + str(self.pid)  +  "/stat |awk '{print $14+$16}'"
        return os.popen(cmd).read().strip("\n")

    def get_cpu_sys(self):
        cmd="cat /proc/" + str(self.pid)  +  "/stat |awk '{print $15+$17}'"
        return os.popen(cmd).read().strip("\n")

    def get_cpu_all(self):
        cmd="cat /proc/" + str(self.pid)  +  "/stat |awk '{print $14+$15+$16+$17}'"
        return os.popen(cmd).read().strip("\n")

    def get_mem(self):
        cmd="cat /proc/" + str(self.pid)  +  "/status |grep VmRSS |awk '{print $2*1024}'"
        return os.popen(cmd).read().strip("\n")

    def get_swap(self):
        cmd="cat /proc/" + str(self.pid)  +  "/stat |awk '{print $(NF-7)+$(NF-8)}' "
        return os.popen(cmd).read().strip("\n")

    def get_fd(self):
        cmd="cat /proc/" + str(self.pid)  +  "/status |grep FDSize |awk '{print $2}'"
        return os.popen(cmd).read().strip("\n")

    def run(self):
        self.resources_d={
            'process.cpu.user':[self.get_cpu_user,'counter'],
            'process.cpu.sys':[self.get_cpu_sys,'counter'],
            'process.cpu.all':[self.get_cpu_all,'counter'],
            'process.mem':[self.get_mem,'gauge'],
            'process.swap':[self.get_swap,'gauge'],
            'process.fd':[self.get_fd,'gauge']
        }

        if not os.path.isdir("/proc/" + str(self.pid)):
            return
        for resource in  self.resources_d.keys():
                t = {}
                #t['endpoint'] = self.host
                #t['timestamp'] = int(time.time())
                #t['step'] = 60
                t['data_type'] = self.resources_d[resource][1]
                t['metric'] = resource
                t['value']= int(self.resources_d[resource][0]())
                t['tags'] = {"proname": proname}
		output.append(t)

    def dump_data(self):
        return json.dumps()

def getPid(process):
    import commands
    import sys
    cmd = "ps aux | grep '%s' |grep -v grep " % process
    #logging.info(cmd)
    info = commands.getoutput(cmd)
    infos = info.split()
    if len(infos) > 1:
        return infos[1]
    else:
        return -1
 
def getargs():
	if len(sys.argv) < 2:
                print "Error.Args not None!"
                sys.exit()
        if len(sys.argv) == 2:
                proname = sys.argv[1]
        try:
                if len(proname.split(',')) == 1:
                        raise Exception('1')
                proname = list(proname.split(','))
        except Exception,e:
                pass

	return proname
        if type(port) == list:
                for p in port:
                        port_dict = print_json_list(p)
                        data.append(port_dict)
        else:
                port_dict = print_json_list(port)
                data.append(port_dict)

if __name__ == "__main__":
    output = []
    proname=getargs()
    if type(proname) == list:
        pronames = proname
	for proname in pronames:
    	    mpid = getPid(proname)
    	    Resource(int(mpid)).run()
    else:
	mpid = getPid(proname)
    	Resource(int(mpid)).run()

    if output:
        print json.dumps(output,indent=4)
